package com.bursuc.flightreservation.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.bursuc.flightreservation.entities.User;
import com.bursuc.flightreservation.repos.UserRepository;
import com.bursuc.flightreservation.services.SecurityService;

@Controller
public class UserController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);
	
	@Autowired
	private SecurityService securityService;
	
	@Autowired
	private BCryptPasswordEncoder encoder;
	
	@Autowired
	private UserRepository userRepository;
	
	@RequestMapping("/showRegistration")
	public String showRegistrationPage() {
		LOGGER.info("inside showRegistrationPage()");
		return "login/registerUser";
	}
	
	@PostMapping ("/registerUser")
	public String registerUser(@ModelAttribute User user) {
		LOGGER.info("inside registerUser() " + user);
		user.setPassword(encoder.encode(user.getPassword()));
		userRepository.save(user);
		return "login/login";
	}
	
	@RequestMapping("/showLogin")
	public String showLoginPage() {
		LOGGER.info("inside showLoginPage()");
		return "login/login";
	}
	
	@PostMapping("/login")
	public String loginUser(@RequestParam String email, @RequestParam String password, Model model) {
		
		boolean loginResponse = securityService.login(email, password);
		
		LOGGER.info("inside loginUser() " + email);
		
		User user = userRepository.findByEmail(email);
		if (loginResponse) {
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			String userName = authentication.getCredentials().toString();
			model.addAttribute("loggedUser", userName);
			return "findFlights";
		}else {
		model.addAttribute("wrong", "Wrong email or password, please try again");
		return "login/login";
		}
	}

}
